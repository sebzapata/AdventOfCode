{"version":3,"sources":["NavigationHeader.jsx","challenges/day1.jsx","DisplayPanel.jsx","serviceWorker.js","index.js","App.jsx"],"names":["NavigationHeader","react_default","a","createElement","className","react_router_dom","exact","to","Day1","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","part1Result","part2Result","fileLoaded","handleChange","bind","assertThisInitialized","inherits","createClass","key","value","_this2","react","type","multiple","onChange","e","target","files","concat","file","_this3","setState","reader","FileReader","readAsText","onload","numbersArray","result","split","filter","x","map","parseInt","reduce","b","currentFrequency","resultArray","doubleArray","forEach","indexOf","push","length","React","DisplayPanel","react_router","path","render","day1_Day1","Boolean","window","location","hostname","match","ReactDOM","NavigationHeader_NavigationHeader","DisplayPanel_DisplayPanel","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kOAGaA,EAAmB,WAC9B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASC,OAAK,EAACC,GAAG,IAAlB,QACAN,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASC,OAAK,EAACC,GAAG,SAAlB,+DCLOC,EAAb,SAAAC,GACE,SAAAD,EAAYE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACjBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,YAAa,KACbC,YAAa,KACbC,YAAY,GAGdV,EAAKW,aAAeX,EAAKW,aAAaC,KAAlBX,OAAAY,EAAA,EAAAZ,CAAAD,IATHA,EADrB,OAAAC,OAAAa,EAAA,EAAAb,CAAAJ,EAAAC,GAAAG,OAAAc,EAAA,EAAAd,CAAAJ,EAAA,EAAAmB,IAAA,SAAAC,MAAA,WAaW,IAAAC,EAAAf,KAEP,OACEgB,EAAA,yBACEA,EAAA,uBAAOC,KAAK,OAAOC,UAAU,EAAOC,SAAU,SAACC,GAAD,OAAOL,EAAKP,aAAaY,EAAEC,OAAOC,MAAM,QAEnFtB,KAAKI,MAAMC,aAAeL,KAAKI,MAAMG,WACpCS,EAAA,kCAEEA,EAAA,yBACGhB,KAAKI,MAAMC,aAAeW,EAAA,kCAAAO,OAAevB,KAAKI,MAAMC,cACpDL,KAAKI,MAAME,aAAeU,EAAA,kCAAAO,OAAevB,KAAKI,MAAME,kBAxBrE,CAAAO,IAAA,eAAAC,MAAA,SAgCeU,GAAM,IAAAC,EAAAzB,KACjBA,KAAK0B,SAAS,CAACnB,YAAY,IAE3B,IAAMoB,EAAS,IAAIC,WACnBD,EAAOE,WAAWL,GAElBG,EAAOG,OAAS,WACd,IAEMC,EAFUJ,EAAOK,OACKC,MAAM,MACDC,OAAO,SAAAC,GAAC,MAAU,KAANA,IAAUC,IAAI,SAAAD,GAAC,OAAIE,SAASF,EAAG,MAEtE9B,EAAc0B,EAAaO,OAAO,SAAClD,EAAGmD,GAAJ,OAAUnD,EAAImD,GAAG,GAErDC,EAAmB,EACnBC,EAAc,GACdC,EAAc,GAElB,GACEX,EAAaY,QAAQ,SAAAR,GACnBK,GAAsCL,EAClCM,EAAYG,QAAQJ,IAAqB,EAC3CE,EAAYG,KAAKL,GAGjBC,EAAYI,KAAKL,WAGS,IAAvBE,EAAYI,QAErBrB,EAAKC,SAAS,CACZrB,cACAC,YAAaoC,EAAY,UA/DjChD,EAAA,CAA0BqD,aCEbC,EAAe,WAC1B,OACE7D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,CACEzD,OAAK,EACL0D,KAAK,MAEP/D,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,CACEzD,OAAK,EACL0D,KAAK,QACLC,OAAQ,SAACvD,GAAD,OAAWT,EAAAC,EAAAC,cAAC+D,EAAD,iBCFPC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASP,OACPhE,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cCJe,WACjB,OACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACsE,EAAD,MACAxE,EAAAC,EAAAC,cAACuE,EAAD,QDAF,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d262dcb0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nexport const NavigationHeader = () => {\r\n  return (\r\n    <div className=\"header\">\r\n      <NavLink exact to=\"\">Home</NavLink>\r\n      <NavLink exact to=\"/day1\">1</NavLink>\r\n    </div>\r\n  )\r\n};\r\n","import * as React from \"react\";\r\n\r\nexport class Day1 extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      part1Result: null,\r\n      part2Result: null,\r\n      fileLoaded: false\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <input type=\"file\" multiple={false} onChange={(e) => this.handleChange(e.target.files[0])}/>\r\n        {\r\n          !this.state.part1Result && this.state.fileLoaded\r\n          ? <p>Loading</p>\r\n          : (\r\n              <div>\r\n                {this.state.part1Result && <p>{`Part 1: ${this.state.part1Result}`}</p>}\r\n                {this.state.part2Result && <p>{`Part 2: ${this.state.part2Result}`}</p>}\r\n              </div>\r\n            )\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n\r\n  handleChange(file) {\r\n    this.setState({fileLoaded: true});\r\n\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n\r\n    reader.onload = () => {\r\n      const rawText = reader.result;\r\n      const stringArray = rawText.split(\"\\n\");\r\n      const numbersArray = stringArray.filter(x => x !== \"\").map(x => parseInt(x, 10));\r\n\r\n      const part1Result = numbersArray.reduce((a, b) => a + b, 0);\r\n\r\n      let currentFrequency = 0;\r\n      let resultArray = [];\r\n      let doubleArray = [];\r\n\r\n      do {\r\n        numbersArray.forEach(x => {\r\n          currentFrequency = currentFrequency + x;\r\n          if (resultArray.indexOf(currentFrequency) > -1) {\r\n            doubleArray.push(currentFrequency);\r\n          }\r\n          else {\r\n            resultArray.push(currentFrequency)\r\n          }\r\n        });\r\n      } while (doubleArray.length === 0);\r\n\r\n      this.setState({\r\n        part1Result,\r\n        part2Result: doubleArray[0]\r\n      });\r\n    };\r\n\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Route } from 'react-router'\r\nimport {Day1} from \"./challenges/day1\";\r\n\r\nexport const DisplayPanel = () => {\r\n  return (\r\n    <div className=\"dynamic\">\r\n      <Route\r\n        exact\r\n        path=\"/\"\r\n      />\r\n      <Route\r\n        exact\r\n        path=\"/day1\"\r\n        render={(props) => <Day1/>}\r\n      />\r\n    </div>\r\n  )\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport { NavigationHeader }from './NavigationHeader'\r\nimport { DisplayPanel } from './DisplayPanel'\r\nimport './App.css';\r\n\r\nexport const App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <NavigationHeader />\r\n      <DisplayPanel />\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}